package JIT;

/**
 * 即时编译器优化技术一览
 *
 * @date 2019/6/11 17:53
 */
public class Skills {
//  + 编译器策略
//    + 延迟编译
//    + 分层编译
//    + 栈上替换：
//    + 延迟优化
//    + 程序依赖图表示
//    + 静态单赋值表示
//  + 基于性能监控的优化技术
//    + 乐观空值断言
//    + 乐观类型断言
//    + 乐观类型增强
//    + 乐观数组长度增强
//    + 裁剪未被选择的分支
//    + 乐观的多态内联
//    + 分支频率预测
//    + 调用频率预测
//  + 基于证据的优化技术
//    + 精确类型推断
//    + 内存值推断
//    + 内存值跟踪
//    + 常量拆叠
//    + 重组
//    + 操作符退化
//    + 空值检查消除
//    + 类型检测退化
//    + 类型检测消除
//    + 代数化简
//    + 公共子表达式消除
//  + 数据流敏感重写
//    + 条件常量传播
//    + 基于流承载的类型缩减转换
//    + 无用代码清除
//  + 语言相关的优化技术
//    + 类型继承关系分析
//    + 去虚拟机化
//    + 符号常量传播
//    + 自动装箱传播
//    + 逃逸分析：
//    + 锁清除：
//    + 锁膨胀
//    + 清除反射
//  + 内存及代码位置变换
//    + 表达式提升
//    + 表达式下沉
//    + 冗余存储消除
//    + 相邻存储合并
//    + 交汇点分离
//  + 循环变换
//    + 循环展开
//    + 循环剥离
//    + 安全点消除
//    + 迭代范围分离
//    + 范围检查消除
//    + 循环向量化
//  + 全局代码调整
//    + 内联
//    + 全局代码外提
//    + 基于热度的代码布局：
//    + Switch调整
//  + 控制流图变换
//    + 本地代码编排
//    + 本地代码封包
//    + 延迟槽填充
//    + 着色图寄存器分配
//    + 线性扫描寄存器分配
//    + 复写聚合
//    + 常量分裂
//    + 复写移除
//    + 地址模式匹配
//    + 指令窥孔优化
//    + 基于确定有限状态机的代码生成
}
